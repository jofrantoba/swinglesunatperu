/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * panelRptCuenta47.java
 *
 * Created on 06-dic-2011, 16:13:31
 */
package com.contab.view;

import com.contab.bean.BeanEmpresa;
import com.contab.combobox.ComboModelEmpresas;
import com.contab.datasource.DataSourceCuenta47;
import com.contab.logic.LogicCuenta47;
import com.contab.logic.LogicEmpresa;
import com.contab.util.Exportar;
import com.contab.util.JFileChooserModel;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import java.sql.SQLException;
import java.util.Date;
import java.util.HashMap;
import java.util.Locale;
import java.util.Map;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.SwingWorker;
import javax.swing.filechooser.FileNameExtensionFilter;
import net.sf.jasperreports.engine.JRParameter;
import org.openide.util.Exceptions;

/**
 *
 * @author cixtic03
 */
public class panelRptCuenta47 extends javax.swing.JPanel {

    private ComboModelEmpresas modelempresa = new ComboModelEmpresas();
    FrmPanel panelexportacion = new FrmPanel(ViewLogin.picture.getIconCuenta47(), "Cuenta 47");
    private JFileChooserModel fileChooser = new JFileChooserModel();
    FileNameExtensionFilter filterDOC = new FileNameExtensionFilter("docx", "docx");
    FileNameExtensionFilter filterXLS = new FileNameExtensionFilter("xlsx", "xlsx");

    /** Creates new form panelRptCuenta47 */
    public panelRptCuenta47() throws SQLException {

        panelexportacion.getWord().setIcon(ViewLogin.picture.getIconword32());
        panelexportacion.getWord().setToolTipText("Exportar a Word");
        panelexportacion.getNuevo().addActionListener(actionListener);
        panelexportacion.getActualizar().setIcon(ViewLogin.picture.getIconExcel());
        panelexportacion.getActualizar().setToolTipText("Exportar a Excel");
        panelexportacion.getEliminar().setIcon(ViewLogin.picture.getIconPDF32());
        panelexportacion.getEliminar().setToolTipText("Expotar a pdf");
        panelexportacion.getPanelData().setVisible(false);
        initComponents();
        modelempresa.setData(LogicEmpresa.listaDeEmpresa());
        cmbEmpresa.setModel(modelempresa);
        panelexportacion.getPanelFormulario().add(this);
        panelexportacion.getWord().addActionListener(actionListener);
        panelexportacion.getNuevo().addActionListener(actionListener);
        panelexportacion.getActualizar().addActionListener(actionListener);
        panelexportacion.getEliminar().addActionListener(actionListener);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel3 = new javax.swing.JLabel();
        txtano = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        cmbMes = new javax.swing.JComboBox();
        cmbEmpresa = new javax.swing.JComboBox();
        jLabel1 = new javax.swing.JLabel();

        jLabel3.setText(org.openide.util.NbBundle.getMessage(panelRptCuenta47.class, "panelRptCuenta47.jLabel3.text")); // NOI18N

        txtano.setText(org.openide.util.NbBundle.getMessage(panelRptCuenta47.class, "panelRptCuenta47.txtano.text")); // NOI18N

        jLabel2.setText(org.openide.util.NbBundle.getMessage(panelRptCuenta47.class, "panelRptCuenta47.jLabel2.text")); // NOI18N

        cmbMes.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Enero", "Febrero", "Marzo", "Abril", "Mayo", "Junio", "Julio", "Agosto", "Septiembre", "Octubre", "Noviembre", "Diciembre" }));

        cmbEmpresa.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbEmpresaActionPerformed(evt);
            }
        });

        jLabel1.setText(org.openide.util.NbBundle.getMessage(panelRptCuenta47.class, "panelRptCuenta47.jLabel1.text")); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtano, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cmbMes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cmbEmpresa, javax.swing.GroupLayout.PREFERRED_SIZE, 234, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(26, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 111, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(cmbEmpresa, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(txtano, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cmbMes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

private void cmbEmpresaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbEmpresaActionPerformed
}//GEN-LAST:event_cmbEmpresaActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox cmbEmpresa;
    private javax.swing.JComboBox cmbMes;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JTextField txtano;
    // End of variables declaration//GEN-END:variables

    private File seleccionarArchivo(FileNameExtensionFilter tipoFiltro, String nombreLibro, String tipoExportacion) {
        fileChooser.setFileFilter(tipoFiltro);
        Date hoy = new Date();
        File archivo = new File(nombreLibro + hoy.getTime() + "." + tipoExportacion);
        fileChooser.setSelectedFile(archivo);
        int result = fileChooser.showSaveDialog(null);
        if (result == JFileChooser.APPROVE_OPTION) {
            return fileChooser.getSelectedFile();
        } else {
            JOptionPane.showMessageDialog(null, "No seleccionó ningún fichero", "Diálogo cerrado o cancelado", JOptionPane.INFORMATION_MESSAGE);
            return null;
        }
    }

    private void exportarCuenta47AExcel(File ruta) throws SQLException {
        BeanEmpresa objEmpresa = ((ComboModelEmpresas) (cmbEmpresa.getModel())).getElement(cmbEmpresa.getSelectedIndex());
        int ano = Integer.parseInt(txtano.getText());
        int num_mes = cmbMes.getSelectedIndex() + 1;
        Map parameters = new HashMap();
        //ClassFecha xmes = new ClassFecha();
        DataSourceCuenta47 ds = LogicCuenta47.Cuenta47(ano, num_mes, objEmpresa.getCodigo());
        try {
            if (ruta != null) {

                parameters.put("empresa", objEmpresa.getDescripcion());
                parameters.put("ano", txtano.getText());
                parameters.put("ruc", objEmpresa.getRuc());
                //Locale loc = new Locale("en", "US");
                parameters.put(JRParameter.REPORT_LOCALE, Locale.US);

                String rutaCuenta47 = "/com/contab/report/irptcuenta47.jasper";
                Exportar ex = new Exportar(ruta, parameters, "xlsx", ds, rutaCuenta47);
                ViewApplication.mensajeEstado.setText(null);
                ViewApplication.mensajeEstado.setText("FORMATO CUENTA 47 EXPORTADO SATISFACTORIAMENTE!!");
                ex.show();
                JOptionPane.showMessageDialog(null, "REPORTE CUENTA 47", "ALERT", JOptionPane.INFORMATION_MESSAGE);
            }
        } catch (Exception ex) {
            Exceptions.printStackTrace(ex);
            System.out.println("El error se debe:" + ex.getMessage());
        }
    }

    private void exportarCuenta47AWord(File ruta) throws SQLException {
        BeanEmpresa objEmpresa = ((ComboModelEmpresas) (cmbEmpresa.getModel())).getElement(cmbEmpresa.getSelectedIndex());
        int ano = Integer.parseInt(txtano.getText());
        int num_mes = cmbMes.getSelectedIndex() + 1;
        Map parameters = new HashMap();
        //ClassFecha xmes = new ClassFecha();
        DataSourceCuenta47 ds = LogicCuenta47.Cuenta47(ano, num_mes, objEmpresa.getCodigo());
        try {
            if (ruta != null) {

                parameters.put("empresa", objEmpresa.getDescripcion());
                parameters.put("ano", txtano.getText());
                parameters.put("ruc", objEmpresa.getRuc());
                //Locale loc = new Locale("en", "US");
                parameters.put(JRParameter.REPORT_LOCALE, Locale.US);

                String rutaCuenta47 = "/com/contab/report/irptcuenta47.jasper";
                Exportar ex = new Exportar(ruta, parameters, "docx", ds, rutaCuenta47);
                ViewApplication.mensajeEstado.setText(null);
                ViewApplication.mensajeEstado.setText("FORMATO CUENTA 47 EXPORTADO SATISFACTORIAMENTE!!");
                ex.show();
                JOptionPane.showMessageDialog(null, "REPORTE CUENTA 47", "ALERT", JOptionPane.INFORMATION_MESSAGE);
            }
        } catch (Exception ex) {
            Exceptions.printStackTrace(ex);
            System.out.println("El error se debe:" + ex.getMessage());
        }
    }

    private void exportarCuenta47APDF(File ruta) throws SQLException {
        BeanEmpresa objEmpresa = ((ComboModelEmpresas) (cmbEmpresa.getModel())).getElement(cmbEmpresa.getSelectedIndex());
        int ano = Integer.parseInt(txtano.getText());
        int num_mes = cmbMes.getSelectedIndex() + 1;
        Map parameters = new HashMap();
        //ClassFecha xmes = new ClassFecha();
        DataSourceCuenta47 ds = LogicCuenta47.Cuenta47(ano, num_mes, objEmpresa.getCodigo());
        try {
            if (ruta != null) {

                parameters.put("empresa", objEmpresa.getDescripcion());
                parameters.put("ano", txtano.getText());
                parameters.put("ruc", objEmpresa.getRuc());
                //Locale loc = new Locale("en", "US");
                parameters.put(JRParameter.REPORT_LOCALE, Locale.US);

                String rutaCuenta47 = "/com/contab/report/irptcuenta47.jasper";
                Exportar ex = new Exportar(ruta, parameters, "pdf", ds, rutaCuenta47);
                ViewApplication.mensajeEstado.setText(null);
                ViewApplication.mensajeEstado.setText("FORMATO CUENTA 47 EXPORTADO SATISFACTORIAMENTE!!");
                ex.show();
                JOptionPane.showMessageDialog(null, "REPORTE CUENTA 47", "ALERT", JOptionPane.INFORMATION_MESSAGE);
            }
        } catch (Exception ex) {
            Exceptions.printStackTrace(ex);
            System.out.println("El error se debe:" + ex.getMessage());
        }
    }

    class WorkerCuenta47Word extends SwingWorker<Boolean, Integer> {

        public WorkerCuenta47Word() {
        }

        @Override
        protected Boolean doInBackground() {
            try {
                File ruta = seleccionarArchivo(filterDOC, "Cuenta47", "docx");
                exportarCuenta47AWord(ruta);
                return true;
            } catch (SQLException ex) {
                System.err.println(ex.getCause());
                return false;
            }
        }
    }

    class WorkerCuenta47AExcel extends SwingWorker<Boolean, Integer> {

        public WorkerCuenta47AExcel() {
        }

        @Override
        protected Boolean doInBackground() {
            try {
                File ruta = seleccionarArchivo(filterXLS, "Cuenta47", "xlsx");
                exportarCuenta47AExcel(ruta);
                return true;
            } catch (SQLException ex) {
                System.err.println(ex.getCause());
                return false;
            }
        }
    }

    class WorkerCuenta47APDF extends SwingWorker<Boolean, Integer> {

        public WorkerCuenta47APDF() {
        }

        @Override
        protected Boolean doInBackground() {
            try {
                File ruta = seleccionarArchivo(filterXLS, "Cuenta47", "pdf");
                exportarCuenta47APDF(ruta);
                return true;
            } catch (SQLException ex) {
                System.err.println(ex.getCause());
                return false;
            }
        }
    }
    ActionListener actionListener = new ActionListener() {

        @Override
        public void actionPerformed(ActionEvent e) {
            if (e.getSource() == panelexportacion.getWord()) {
                WorkerCuenta47Word doc = new WorkerCuenta47Word();
                doc.execute();
            } else if (e.getSource() == panelexportacion.getEliminar()) {
                WorkerCuenta47APDF pdf = new WorkerCuenta47APDF();
                pdf.execute();
            } else if (e.getSource() == panelexportacion.getActualizar()) {
                WorkerCuenta47AExcel xlsx = new WorkerCuenta47AExcel();
                xlsx.execute();
            }
        }
    };

    public FrmPanel getPanelCuenta47() {
        return panelexportacion;
    }
}
